from project_analyzer import analyze_project, process_follow_up_message
from repository_extraction import clean_zip_file
from langchain_core.messages import HumanMessage, AIMessage

class ProjectReviewer:
    """
    A class that manages the lifecycle of reviewing a project using LLM-based analysis.
    """
    def __init__(self, repo: str):
        """
        Initializes the ProjectReviewer with a ZIP archive of the project.

        Args:
            repo (str): The url of GitHub link to the project.
        """
        self.project_repo = repo
        self.chat_history = []
        self.project_description = None
        self.project_requirements = None
        self.project_directory = None
        self.file_data = None

    def extract_files(self) -> None:
        """
        Extracts and parses the contents of the uploaded ZIP file.
        """
        project_data = clean_zip_file(self.project_repo)
        self.project_requirements = project_data["requirements"]
        self.project_description = project_data["description"]
        self.project_directory = project_data["project_directory"]

    def analyze_project(self):
        """
        Performs a project-wide code analysis and stores the resulting file data.

        Returns:
            str: Feedback message generated by the AI based on the project.
        """
        feedback, self.file_data = analyze_project(self.project_directory, self.project_requirements,
                                                   self.project_description)
        ai_message = AIMessage(content=feedback)
        self.chat_history.append(ai_message)
        return ai_message.content

    def ask_followup(self, user_input: str) -> str:
        """
        Handles a userâ€™s follow-up question using previously analyzed files.

        Args:
            user_input (str): User's question or message.

        Returns:
            str: AI-generated response to the user query.

        Raises:
            RuntimeError: If LLM processing fails.
        """
        human_reply = HumanMessage(content=user_input)
        self.chat_history.append(human_reply)
        response = process_follow_up_message(self.chat_history, user_input, self.file_data)
        ai_reply = AIMessage(content=response)
        self.chat_history.append(ai_reply)
        return ai_reply.content

